logTransformed.dat = log2(data_tpm+1)
dat_batch_removed  <- limma::removeBatchEffect(logTransformed.dat, batch)
logTransformed.dat
batch
####Batch removal
vsd <- vst(dds_tc, blind=TRUE)
batch <- c(1:3,1:3,1:3,1:3,5:7,5:7,8:10,8:10)
assay(vsd) <- limma::removeBatchEffect(assay(vsd), batch)
vsd
assay(vsd)
write.table(assay(vsd),file="/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction/inputs/geneExpression/RNAseq24_DESeq2_VSDcounts.txt",sep='\t',row.names=T)
View(vsd)
names(assay(vsd))[1] <- c('Gene')
write.table(assay(vsd),file="/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction/inputs/geneExpression/RNAseq24_DESeq2_VSDcounts.txt",sep='\t',row.names=T)
assay(vsd)
write.table(assay(vsd),file="/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction/inputs/geneExpression/RNAseq24_DESeq2_VSDcounts.txt",sep='\t',row.names=T)
k<- assay(vsd)
View(k)
k <- as.data.frame(assay(vsd))
View(k)
k <- as.data.frame(vsd)
vsd.df <- as.data.frame(assay(vsd))
write.table(assay(vsd),file="/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction/inputs/geneExpression/RNAseq24_DESeq2_VSDcounts.txt",sep='\t',row.names=F)
names(vsd.df)[1] <- c('Gene')
View(k)
write.table(assay(vsd),file="/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction/inputs/geneExpression/RNAseq24_DESeq2_VSDcounts.txt",sep='\t',row.names=F)
vsd.df <- as.data.frame(assay(vsd))
names(vsd.df)[1] <- c('Gene')
write.table(assay(vsd),file="/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction/inputs/geneExpression/RNAseq24_DESeq2_VSDcounts.txt",sep='\t',row.names=T)
vsd.df <- as.data.frame(assay(vsd))
names(vsd.df)[1] <- c('Gene')
write.table(vsd.df,file="/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction/inputs/geneExpression/RNAseq24_DESeq2_VSDcounts.txt",sep='\t',row.names=T)
vsd.df <- as.data.frame(assay(vsd))
names(vsd.df)[1] <- c('Gene')
vsd.df
View(vsd.df)
names(vsd.df)[0] <- c('Gene')
View(vsd.df)
vsd <- vst(dds_tc, blind=TRUE)
pcaData <- plotPCA(vsd, intgroup=c('time','condition'),returnData=T)
pcaData
plotPCA(vsd, intgroup=c('time','condition'))
####Batch removal
vsd <- vst(dds_tc, blind=TRUE)
batch <- c(1:3,1:3,1:3,1:3,5:7,5:7,8:10,8:10,5:7,5:7)
assay(vsd) <- limma::removeBatchEffect(assay(vsd), batch)
plotPCA(vsd, intgroup=c('time','condition')) + ggtitle("PCA: pancreas")
vsd.df <- as.data.frame(assay(vsd))
names(vsd.df)[0] <- c('Gene')
View(vsd.df)
write.table(vsd.df,file="/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction/inputs/geneExpression/RNAseq24_DESeq2_VSDcounts.txt",sep='\t',row.names=T)
vsd.df <- data.frame(assay(vsd))
View(vsd.df)
vsd.df <- as.data.frame(assay(vsd),row.names = 'Gene')
View(vsd.df)
vsd.df <- as.data.frame(assay(vsd),row.names = 0)
View(vsd.df)
vsd.df <- as.data.frame(assay(vsd),row.names = 1)
View(vsd.df)
vsd.df <- as.data.frame(assay(vsd),row.names=NULL)
View(vsd.df)
vsd.df <- as.data.frame(assay(vsd))
rownames(vsd.df) <- NULL
View(vsd.df)
vsd.df <- as.data.frame(assay(vsd))
df <- cbind(newColName = rownames(df), df)
rownames(df) <- 1:nrow(df)
View(df)
vsd.df <- as.data.frame(assay(vsd))
df <- cbind(newColName = rownames(vsd.df), vsd.df)
View(df)
vsd.df <- as.data.frame(assay(vsd))
vsd.df <- cbind('Gene' = rownames(vsd.df), vsd.df)
rownames(vsd.df) <- NULL
View(vsd.df)
vsd.df <- as.matrix(assay(vsd))
View(vsd.df)
vsd.df <- as.data.frame(assay(vsd))
vsd.df <- cbind('Gene' = rownames(vsd.df), vsd.df)
rownames(vsd.df) <- NULL
write.table(vsd.df,file="/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction/inputs/geneExpression/RNAseq24_DESeq2_VSDcounts.txt",sep='\t',row.names=T)
vsd.df <- as.data.frame(assay(vsd))
vsd.df <- cbind('Gene' = rownames(vsd.df), vsd.df)
rownames(vsd.df) <- NULL
write.table(vsd.df,file="/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction/inputs/geneExpression/RNAseq24_DESeq2_VSDcounts.txt",sep='\t',row.names=T)
View(vsd.df)
vsd.df <- as.data.frame(assay(vsd))
vsd.df <- cbind('Gene' = rownames(vsd.df), vsd.df)
rownames(vsd.df) <- NULL
write.table(vsd.df,file="/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction/inputs/geneExpression/RNAseq24_DESeq2_VSDcounts.txt",sep='\t',row.names=F)
library("DESeq2") # Load DESeq2
library(ggplot2)
library(glue)
file = "/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/XZ_03-04-08-12-2020_RNA-seq_Pancreas/Counts_TPM_mat/Genes_Counts_Matrix_rearranged.txt"
# countData as imported count matrix with row-gene_ID column-sample_name (DESeq2 only accept int value)
database <- read.table(file = file, sep = "\t", header=T,row.names =1)
# using the names function to see names of the variables and which column of
# data to which they correspond
names(database)
# duplicate 0_8hpi as 0_0hpi data at 0 time point
database.0hpi<- database[,rep(1:3,2)]
database.merge <- merge(database.0hpi,database,by=0)
database <- database.merge[-1]
row.names(database) <- database.merge$Row.names
colnames(database)[1:9] <- c('wt_0_8h_0hpi_1','wt_0_8h_0hpi_2','wt_0_8h_0hpi_3','wt_100_8h_0hpi_1','wt_100_8h_0hpi_2','wt_100_8h_0hpi_3','wt_0_8h_8hpi_1','wt_0_8h_8hpi_2','wt_0_8h_8hpi_3')
# set groups with condition (factor), the groups with same condition need to be together
condition <- factor(rep(c(rep("wt_0_8h",3),rep("wt_100_8h",3)),time=5))
# set "wt_0_8h" as reference level
condition <- relevel(condition, "wt_0_8h")
time <- factor(rep(c(0,8,24,48,72), each=6))
# colData (Dataframe) to assign condition to each group
coldata <- data.frame(row.names = colnames(database),condition,time)
# design as differential comparison matrix to indicate comparison gourps/conditions
# construct dds matrix based on countData, colData and design
dds_tc <- DESeqDataSetFromMatrix(countData=database, colData=coldata, design=~condition+time+condition:time)
head(dds_tc)
# filter genes with at least one count
dds_tc <- dds_tc[ rowSums(counts(dds_tc)) >= 1, ]
dds_tc
vsd <- vst(dds_tc, blind=TRUE)
pcaData <- plotPCA(vsd, intgroup=c('time','condition'),returnData=T)
pcaData
plotPCA(vsd, intgroup=c('time','condition'))
####Batch removal
vsd <- vst(dds_tc, blind=TRUE)
batch <- c(1:3,1:3,1:3,1:3,5:7,5:7,8:10,8:10,5:7,5:7)
assay(vsd) <- limma::removeBatchEffect(assay(vsd), batch)
plotPCA(vsd, intgroup=c('time','condition')) + ggtitle("PCA: pancreas")
vsd <- vst(dds_tc, blind=TRUE)
batch <- c(1:3,1:3,1:3,1:3,5:7,5:7,8:10,8:10,5:7,5:7)
assay(vsd) <- limma::removeBatchEffect(assay(vsd), batch)
plotPCA(vsd, intgroup=c('time','condition')) + ggtitle("PCA: pancreas")
vsd.df <- as.data.frame(assay(vsd))
vsd.df <- cbind('Gene' = rownames(vsd.df), vsd.df)
rownames(vsd.df) <- NULL
vsd.df[1:9]
vsd.df[4:]
vsd.df[4:-1]
vsd.df[4:12]
library("DESeq2") # Load DESeq2
library(ggplot2)
library(glue)
file = "/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/XZ_03-04-08-12-2020_RNA-seq_Pancreas/Counts_TPM_mat/Genes_Counts_Matrix_rearranged.txt"
# countData as imported count matrix with row-gene_ID column-sample_name (DESeq2 only accept int value)
database <- read.table(file = file, sep = "\t", header=T,row.names =1)
# using the names function to see names of the variables and which column of
# data to which they correspond
names(database)
# duplicate 0_8hpi as 0_0hpi data at 0 time point
database.0hpi<- database[,rep(1:3,2)]
database.merge <- merge(database.0hpi,database,by=0)
database <- database.merge[-1]
row.names(database) <- database.merge$Row.names
colnames(database)[1:9] <- c('wt_0_8h_0hpi_1','wt_0_8h_0hpi_2','wt_0_8h_0hpi_3','wt_100_8h_0hpi_1','wt_100_8h_0hpi_2','wt_100_8h_0hpi_3','wt_0_8h_8hpi_1','wt_0_8h_8hpi_2','wt_0_8h_8hpi_3')
# set groups with condition (factor), the groups with same condition need to be together
condition <- factor(rep(c(rep("wt_0_8h",3),rep("wt_100_8h",3)),time=5))
# set "wt_0_8h" as reference level
condition <- relevel(condition, "wt_0_8h")
time <- factor(rep(c(0,8,24,48,72), each=6))
# colData (Dataframe) to assign condition to each group
coldata <- data.frame(row.names = colnames(database),condition,time)
# design as differential comparison matrix to indicate comparison gourps/conditions
# construct dds matrix based on countData, colData and design
dds_tc <- DESeqDataSetFromMatrix(countData=database, colData=coldata, design=~condition+time+condition:time)
head(dds_tc)
# filter genes with at least one count
dds_tc <- dds_tc[ rowSums(counts(dds_tc)) >= 1, ]
dds_tc
vsd <- vst(dds_tc, blind=TRUE)
pcaData <- plotPCA(vsd, intgroup=c('time','condition'),returnData=T)
pcaData
plotPCA(vsd, intgroup=c('time','condition'))
####Batch removal
vsd <- vst(dds_tc, blind=TRUE)
batch <- c(1:3,1:3,1:3,1:3,5:7,5:7,8:10,8:10,5:7,5:7)
assay(vsd) <- limma::removeBatchEffect(assay(vsd), batch)
plotPCA(vsd, intgroup=c('time','condition')) + ggtitle("PCA: pancreas")
vsd.df <- as.data.frame(assay(vsd))
vsd.df <- cbind('Gene' = rownames(vsd.df), vsd.df)
rownames(vsd.df) <- NULL
write.table(vsd.df,file="/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction/inputs/geneExpression/RNAseq24_DESeq2_VSDcounts.txt",sep='\t',row.names=F)
View(vsd.df)
vsd.df.100.8 <- vsd.df[ , c(1,11,12,13,17,18,19,23,24,25,29,30,31)]
View(vsd.df.100.8)
write.table(vsd.df.100.8,file="/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction/inputs/geneExpression/RNAseq_100-8_DESeq2_VSDcounts.txt",sep='\t',row.names=F)
library("DESeq2") # Load DESeq2
library(ggplot2)
library(glue)
file = "/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/XZ_03-04-08-12-2020_RNA-seq_Pancreas/Counts_TPM_mat/Genes_Counts_Matrix_rearranged.txt"
# countData as imported count matrix with row-gene_ID column-sample_name (DESeq2 only accept int value)
database <- read.table(file = file, sep = "\t", header=T,row.names =1)
# using the names function to see names of the variables and which column of
# data to which they correspond
names(database)
# duplicate 0_8hpi as 0_0hpi data at 0 time point
database.0hpi<- database[,rep(1:3,2)]
database.merge <- merge(database.0hpi,database,by=0)
database <- database.merge[-1]
row.names(database) <- database.merge$Row.names
colnames(database)[1:9] <- c('wt_0_8h_0hpi_1','wt_0_8h_0hpi_2','wt_0_8h_0hpi_3','wt_100_8h_0hpi_1','wt_100_8h_0hpi_2','wt_100_8h_0hpi_3','wt_0_8h_8hpi_1','wt_0_8h_8hpi_2','wt_0_8h_8hpi_3')
# set groups with condition (factor), the groups with same condition need to be together
condition <- factor(rep(c(rep("wt_0_8h",3),rep("wt_100_8h",3)),time=5))
# set "wt_0_8h" as reference level
condition <- relevel(condition, "wt_0_8h")
time <- factor(rep(c(0,8,24,48,72), each=6))
# colData (Dataframe) to assign condition to each group
coldata <- data.frame(row.names = colnames(database),condition,time)
# design as differential comparison matrix to indicate comparison gourps/conditions
# construct dds matrix based on countData, colData and design
dds_tc <- DESeqDataSetFromMatrix(countData=database, colData=coldata, design=~condition+time+condition:time)
head(dds_tc)
# filter genes with at least one count
dds_tc <- dds_tc[ rowSums(counts(dds_tc)) >= 1, ]
dds_tc
vsd <- vst(dds_tc, blind=TRUE)
pcaData <- plotPCA(vsd, intgroup=c('time','condition'),returnData=T)
pcaData
plotPCA(vsd, intgroup=c('time','condition'))
####Batch removal
vsd <- vst(dds_tc, blind=TRUE)
batch <- c(1:3,1:3,1:3,1:3,5:7,5:7,8:10,8:10,5:7,5:7)
assay(vsd) <- limma::removeBatchEffect(assay(vsd), batch)
plotPCA(vsd, intgroup=c('time','condition')) + ggtitle("PCA: pancreas")
vsd.df <- as.data.frame(assay(vsd))
vsd.df <- cbind('Gene' = rownames(vsd.df), vsd.df)
rownames(vsd.df) <- NULL
vsd.df.100.8 <- vsd.df[ , c(1,11,12,13,17,18,19,23,24,25,29,30,31)]
vsd.df.100.8
View(vsd.df.100.8)
rownames(vsd.df) <- NULL
vsd.df.100.8 <- vsd.df[ , c(1,11,12,13,17,18,19,23,24,25,29,30,31)]
vsd.df.100.8 <- vsd.df[:, c(1,11,12,13,17,18,19,23,24,25,29,30,31)]
vsd.df.100.8 <- vsd.df[ , c(1,11,12,13,17,18,19,23,24,25,29,30,31)]
write.table(vsd.df.100.8,file="/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction/inputs/geneExpression/RNAseq_100-8_DESeq2_VSDcounts.txt",sep='\t',row.names=F)
View(vsd.df.100.8)
vsd.df <- as.data.frame(assay(vsd))
vsd.df <- cbind('Gene' = rownames(vsd.df), vsd.df)
rownames(vsd.df) <- NULL
View(vsd.df)
rownames(vsd.df) <- NULL
vsd.df.100.8 <- vsd.df[ , c(1,11,12,13,17,18,19,23,24,25,29,30,31)]
View(vsd.df.100.8)
write.table(vsd.df,file="/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction/inputs/geneExpression/RNAseq_100-8_DESeq2_VSDcounts.txt",sep='\t',row.names=F)
vsd.df <- as.data.frame(assay(vsd))
vsd.df <- cbind('Gene' = rownames(vsd.df), vsd.df)
rownames(vsd.df) <- NULL
vsd.df.100.8 <- vsd.df[ , c(1,11,12,13,17,18,19,23,24,25,29,30,31)]
write.table(vsd.df.100.8,quote=FALSE,
file="/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction/inputs/geneExpression/RNAseq_100-8_DESeq2_VSDcounts.txt",sep='\t',row.names=F)
# construct_atac_prior.R
# Generate prior gene regulatory network from:
# 1. bed file of accessible chromatin regions.
# 2. TF motifs
# 3. bed file of genomic features (eg, TSS, gene body)
print('--------------------------------------')
rm(list=ls())
options(stringsAsFactors=FALSE)
library(motifmatchr)
library(GenomicRanges)
library(TFBSTools)
# set and get current working path
setwd('/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction')
getwd()
source('/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/priorConstruction/utils_prior.R')
source('/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/priorConstruction/utils_bedtools.R')
#================== INPUTS ===================
# output directory
dir_out <- './inputs/priors'
# prior name (used for output filenames)
name_prior <- 'prior_atac_Miraldi'
# bed file of ATAC-seq peaks
file_peaks <- './inputs/priors/ATAC_peaks.bed'
# genome build
genome <- 'hg19'
# motif directory
dir_motif <-  '/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/database/pwms_all_motifs_plus_transfac_pfm'
# file mapping motifs to genes
# 2-column: [motif name, gene name]
file_motif_info <-  '/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/database/TF_Information_all_motifs_plus_motif_2_gene.txt'
# motif scanning p-value cutoff
pval_cutoff <- 1E-5
# genomic feature file (e.g., gene body, TSS)
# 4-column: [chr, start, end, feature name]
file_features <- '/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/database/hg19/gene_body.bed'
# window within genomic features to search (eg, +/-10kb gene body)
window_feature <- 20000
#=============================================
# create output directory
print(paste('Create output directory:', dir_out))
dir.create(dir_out, recursive=TRUE, showWarnings=FALSE)
# load peaks
print(paste('Load peaks:', file_peaks))
peaks <- read.delim(file_peaks, header=FALSE, sep='\t')
peaks <- peaks[,1:3]
# load motifs
print(paste('Load motifs in directory:', dir_motif))
motifs <- list()
for (ix in list.files(dir_motif,full.names=TRUE)){
curr_motif <- as.matrix(read.delim(ix, header=FALSE, sep='\t'))
curr_motif <- curr_motif[ , colSums(is.na(curr_motif)) == 0] # drop NA columns
curr_name <- tools::file_path_sans_ext(basename(ix))
rownames(curr_motif) <- c('A','C','G','T')
motifs[[curr_name]] <- PFMatrix(ID=curr_name, name=curr_name, bg=c(A=0.25, C=0.25, G=0.25, T=0.25),
profileMatrix=100*curr_motif)
}
motifs <- do.call(PFMatrixList, motifs)
# load motif to gene mapping
print(paste('Load motif info:', file_motif_info))
motif_info <- read.delim(file_motif_info, header=FALSE, sep='\t')
colnames(motif_info) <- c('Motif','TF')
# load genomic features
print(paste('Load genomic features:', file_features))
features <- read.delim(file_features, header=FALSE, sep='\t')
# filter peaks for those within window of genomic features
print('Filter peaks')
features_expand <- features[,1:3]
features_expand[,2] <- pmax(features_expand[,2]-window_feature,0)
features_expand[,3] <- features_expand[,3] + window_feature
peaks_filtered <- bedtools_intersect(peaks, features_expand)
peaks_filtered <- bedtools_merge(peaks_filtered)
peaks_range <- GRanges(seqnames=peaks_filtered[,1],
ranges=IRanges(start=peaks_filtered[,2], end=peaks_filtered[,3]))
# motif scanning
print('Scan peaks for motifs')
motif_scan <- matchMotifs(motifs, peaks_range, genome=genome, p.cutoff=pval_cutoff, out='positions')
motif_scan <- as.data.frame(motif_scan)[,c('seqnames', 'start', 'end', 'group_name')]
colnames(motif_scan) <- c('Chr','Start','End','Motif')
# construct prior - quantitative, sparse format
print('Construct prior')
prior_q_sp <- prior_proximal(bed_motif=motif_scan, bed_feature=features,
tf_motif=motif_info, window_feature=window_feature)
print('Save priors')
# quantitative - sparse
file_out <- file.path(dir_out, paste0(name_prior,'_q_sp.tsv'))
write.table(prior_q_sp, file_out, quote=FALSE, sep='\t', col.names=TRUE, row.names=FALSE)
# quantitative - full
prior_q_full <- net_sparse_2_full(prior_q_sp)
file_out <- file.path(dir_out, paste0(name_prior,'_q.tsv'))
save_data_matrix(prior_q_full, file_out)
# binary - sparse
prior_b_sp <- net_quant_2_binary(prior_q_sp)
file_out <- file.path(dir_out, paste0(name_prior,'_b_sp.tsv'))
write.table(prior_b_sp, file_out, quote=FALSE, sep='\t', col.names=TRUE, row.names=FALSE)
# binary - full
prior_b_full <- net_sparse_2_full(prior_b_sp)
file_out <- file.path(dir_out, paste0(name_prior,'_b.tsv'))
save_data_matrix(prior_b_full, file_out)
print('Save merged priors')
# Given degeneracy of TF motifs, many priors based on ATAC-seq data
# contain TFs with identical target genes and interaction strengths.
# We merge these TFs to create meta-TFs.
# merged quantitative - full
prior_merge_q_full <- net_prior_merge(prior_q_full)
if ('MergedTFs' %in% names(prior_merge_q_full)){
file_out <- file.path(dir_out, paste0(name_prior,'_q_merged.tsv'))
save_data_matrix(prior_merge_q_full[['Network']], file_out)
# merged quantitative - sparse
prior_merge_q_sp <- net_full_2_sparse(prior_merge_q_full[['Network']])
file_out <- file.path(dir_out, paste0(name_prior,'_q_merged_sp.tsv'))
write.table(prior_merge_q_sp, file_out, quote=FALSE, sep='\t', col.names=TRUE, row.names=FALSE)
# merged quantitative - merged TF info
file_out <- file.path(dir_out, paste0(name_prior,'_q_mergedTfs.txt'))
write.table(prior_merge_q_full[['MergedTFs']], file_out, quote=FALSE, col.names=FALSE, row.names=FALSE, sep='\t')
}
# merged binary - sparse
prior_merge_b_full <- net_prior_merge(prior_b_full)
if ('MergedTFs' %in% names(prior_merge_b_full)){
file_out <- file.path(dir_out, paste0(name_prior,'_b_merged.tsv'))
save_data_matrix(prior_merge_b_full[['Network']], file_out)
# merged binary - full
prior_merge_b_sp <- net_full_2_sparse(prior_merge_b_full[['Network']])
file_out <- file.path(dir_out, paste0(name_prior,'_b_merged_sp.tsv'))
write.table(prior_merge_b_sp, file_out, quote=FALSE, sep='\t', col.names=TRUE, row.names=FALSE)
# merged quantitative - merged TF info
file_out <- file.path(dir_out, paste0(name_prior,'_b_mergedTfs.txt'))
write.table(prior_merge_b_full[['MergedTFs']], file_out, quote=FALSE, col.names=FALSE, row.names=FALSE, sep='\t')
}
#=============================================
print('--------------------------------------')
print('Done!')
# construct_atac_prior.R
# Generate prior gene regulatory network from:
# 1. bed file of accessible chromatin regions.
# 2. TF motifs
# 3. bed file of genomic features (eg, TSS, gene body)
print('--------------------------------------')
rm(list=ls())
options(stringsAsFactors=FALSE)
library(motifmatchr)
library(GenomicRanges)
library(TFBSTools)
# set and get current working path
setwd('/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/pancreas_NEUROG3_induction')
getwd()
source('/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/priorConstruction/utils_prior.R')
source('/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/mLASSO-StARS/modeling/infTRN_lassoStARS/priorConstruction/utils_bedtools.R')
#================== INPUTS ===================
# output directory
dir_out <- './inputs/priors'
# prior name (used for output filenames)
name_prior <- 'prior_atac_Miraldi'
# bed file of ATAC-seq peaks
file_peaks <- './inputs/priors/ATAC_peaks.bed'
# genome build
genome <- 'hg19'
# motif directory
dir_motif <-  '/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/database/pwms_all_motifs_plus_transfac_pfm'
# file mapping motifs to genes
# 2-column: [motif name, gene name]
file_motif_info <-  '/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/database/TF_Information_all_motifs_plus_motif_2_gene.txt'
# motif scanning p-value cutoff
pval_cutoff <- 1E-5
# genomic feature file (e.g., gene body, TSS)
# 4-column: [chr, start, end, feature name]
file_features <- '/Users/user/Desktop/big-data_analysis/NGS_XZ/NGS/database/hg19/gene_body.bed'
# window within genomic features to search (eg, +/-10kb gene body)
window_feature <- 20000
#=============================================
# create output directory
print(paste('Create output directory:', dir_out))
dir.create(dir_out, recursive=TRUE, showWarnings=FALSE)
# load peaks
print(paste('Load peaks:', file_peaks))
peaks <- read.delim(file_peaks, header=FALSE, sep='\t')
peaks <- peaks[,1:3]
# load motifs
print(paste('Load motifs in directory:', dir_motif))
motifs <- list()
for (ix in list.files(dir_motif,full.names=TRUE)){
curr_motif <- as.matrix(read.delim(ix, header=FALSE, sep='\t'))
curr_motif <- curr_motif[ , colSums(is.na(curr_motif)) == 0] # drop NA columns
curr_name <- tools::file_path_sans_ext(basename(ix))
rownames(curr_motif) <- c('A','C','G','T')
motifs[[curr_name]] <- PFMatrix(ID=curr_name, name=curr_name, bg=c(A=0.25, C=0.25, G=0.25, T=0.25),
profileMatrix=100*curr_motif)
}
motifs <- do.call(PFMatrixList, motifs)
# load motif to gene mapping
print(paste('Load motif info:', file_motif_info))
motif_info <- read.delim(file_motif_info, header=FALSE, sep='\t')
colnames(motif_info) <- c('Motif','TF')
# load genomic features
print(paste('Load genomic features:', file_features))
features <- read.delim(file_features, header=FALSE, sep='\t')
# filter peaks for those within window of genomic features
print('Filter peaks')
features_expand <- features[,1:3]
features_expand[,2] <- pmax(features_expand[,2]-window_feature,0)
features_expand[,3] <- features_expand[,3] + window_feature
peaks_filtered <- bedtools_intersect(peaks, features_expand)
peaks_filtered <- bedtools_merge(peaks_filtered)
peaks_range <- GRanges(seqnames=peaks_filtered[,1],
ranges=IRanges(start=peaks_filtered[,2], end=peaks_filtered[,3]))
# motif scanning
print('Scan peaks for motifs')
print('Scan peaks for motifs')
motif_scan <- matchMotifs(motifs, peaks_range, genome=genome, p.cutoff=pval_cutoff, out='positions')
motif_scan <- as.data.frame(motif_scan)[,c('seqnames', 'start', 'end', 'group_name')]
colnames(motif_scan) <- c('Chr','Start','End','Motif')
# construct prior - quantitative, sparse format
print('Construct prior')
prior_q_sp <- prior_proximal(bed_motif=motif_scan, bed_feature=features,
tf_motif=motif_info, window_feature=window_feature)
print('Save priors')
# quantitative - sparse
file_out <- file.path(dir_out, paste0(name_prior,'_q_sp.tsv'))
write.table(prior_q_sp, file_out, quote=FALSE, sep='\t', col.names=TRUE, row.names=FALSE)
# quantitative - full
prior_q_full <- net_sparse_2_full(prior_q_sp)
file_out <- file.path(dir_out, paste0(name_prior,'_q.tsv'))
save_data_matrix(prior_q_full, file_out)
# binary - sparse
prior_b_sp <- net_quant_2_binary(prior_q_sp)
file_out <- file.path(dir_out, paste0(name_prior,'_b_sp.tsv'))
write.table(prior_b_sp, file_out, quote=FALSE, sep='\t', col.names=TRUE, row.names=FALSE)
# binary - full
prior_b_full <- net_sparse_2_full(prior_b_sp)
file_out <- file.path(dir_out, paste0(name_prior,'_b.tsv'))
save_data_matrix(prior_b_full, file_out)
print('Save merged priors')
# Given degeneracy of TF motifs, many priors based on ATAC-seq data
# contain TFs with identical target genes and interaction strengths.
# We merge these TFs to create meta-TFs.
# merged quantitative - full
prior_merge_q_full <- net_prior_merge(prior_q_full)
if ('MergedTFs' %in% names(prior_merge_q_full)){
file_out <- file.path(dir_out, paste0(name_prior,'_q_merged.tsv'))
save_data_matrix(prior_merge_q_full[['Network']], file_out)
# merged quantitative - sparse
prior_merge_q_sp <- net_full_2_sparse(prior_merge_q_full[['Network']])
file_out <- file.path(dir_out, paste0(name_prior,'_q_merged_sp.tsv'))
write.table(prior_merge_q_sp, file_out, quote=FALSE, sep='\t', col.names=TRUE, row.names=FALSE)
# merged quantitative - merged TF info
file_out <- file.path(dir_out, paste0(name_prior,'_q_mergedTfs.txt'))
write.table(prior_merge_q_full[['MergedTFs']], file_out, quote=FALSE, col.names=FALSE, row.names=FALSE, sep='\t')
}
# merged binary - sparse
prior_merge_b_full <- net_prior_merge(prior_b_full)
if ('MergedTFs' %in% names(prior_merge_b_full)){
file_out <- file.path(dir_out, paste0(name_prior,'_b_merged.tsv'))
save_data_matrix(prior_merge_b_full[['Network']], file_out)
# merged binary - full
prior_merge_b_sp <- net_full_2_sparse(prior_merge_b_full[['Network']])
file_out <- file.path(dir_out, paste0(name_prior,'_b_merged_sp.tsv'))
write.table(prior_merge_b_sp, file_out, quote=FALSE, sep='\t', col.names=TRUE, row.names=FALSE)
# merged quantitative - merged TF info
file_out <- file.path(dir_out, paste0(name_prior,'_b_mergedTfs.txt'))
write.table(prior_merge_b_full[['MergedTFs']], file_out, quote=FALSE, col.names=FALSE, row.names=FALSE, sep='\t')
}
#=============================================
print('--------------------------------------')
print('Done!')
